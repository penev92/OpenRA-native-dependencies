name: Build Binaries

env:
  FREETYPE_VERSION: 2.12.1
  LUA_VERSION: 5.1.5
  OPENALSOFT_VERSION: 1.20.1
  SDL2_VERSION: 2.26.1

on:
  workflow_dispatch:
  #push:
  #  branches:
  #    - master
  #    - test

jobs:
  macos:
    name: macOS (x64 + arm64)
    runs-on: macos-11
    steps:
      - name: Clone Repository
        uses: actions/checkout@v2
      - name: Setup Dependencies
        run: |
          mkdir -p artifacts/x86_64
          mkdir artifacts/arm64
      - name: Freetype
        run: |
          curl -s -L -O https://download.savannah.gnu.org/releases/freetype/freetype-${FREETYPE_VERSION}.tar.xz
          tar xf freetype-${FREETYPE_VERSION}.tar.xz
          cd freetype-${FREETYPE_VERSION}
          cmake -B build -DBUILD_SHARED_LIBS=true -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DCMAKE_OSX_DEPLOYMENT_TARGET=10.11 -DFT_DISABLE_ZLIB=TRUE -DFT_DISABLE_BZIP2=TRUE -DFT_DISABLE_PNG=TRUE -DFT_DISABLE_HARFBUZZ=TRUE -DFT_DISABLE_BROTLI=TRUE
          cmake --build build
          lipo -thin arm64 build/libfreetype.6.dylib -output ../artifacts/arm64/freetype6.dylib
          lipo -thin x86_64 build/libfreetype.6.dylib -output ../artifacts/x86_64/freetype6.dylib
      - name: OpenAL Soft
        run: |
          curl -s -L -O https://openal-soft.org/openal-releases/openal-soft-${OPENALSOFT_VERSION}.tar.bz2
          tar xf openal-soft-${OPENALSOFT_VERSION}.tar.bz2
          cd openal-soft-${OPENALSOFT_VERSION}
          cmake -B build -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DALSOFT_EXAMPLES=OFF -DALSOFT_UTILS=OFF -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DCMAKE_OSX_DEPLOYMENT_TARGET=10.11
          cmake --build build
          lipo -thin arm64 build/libopenal.${OPENALSOFT_VERSION}.dylib -output ../artifacts/arm64/soft_oal.dylib
          lipo -thin x86_64 build/libopenal.${OPENALSOFT_VERSION}.dylib -output ../artifacts/x86_64/soft_oal.dylib
      - name: Lua 5.1
        run: |
          curl -s -L -O https://www.lua.org/ftp/lua-${LUA_VERSION}.tar.gz
          tar xf lua-${LUA_VERSION}.tar.gz
          cd lua-${LUA_VERSION}/src/
          patch < ../../liblua.patch
          make liblua.5.1.dylib CC="clang -target x86_64-apple-macos10.11" LD="clang -target x86_64-apple-macos10.11"
          cp liblua.${LUA_VERSION}.dylib ../../artifacts/x86_64/lua51.dylib
          make clean
          make liblua.5.1.dylib CC="clang -target arm64-apple-macos10.15" LD="clang -target arm64-apple-macos10.15"
          cp liblua.${LUA_VERSION}.dylib ../../artifacts/arm64/lua51.dylib
      - name: SDL2
        run: |
          curl -s -L -O http://www.libsdl.org/release/SDL2-${SDL2_VERSION}.tar.gz
          tar xf SDL2-${SDL2_VERSION}.tar.gz
          mkdir SDL2-${SDL2_VERSION}/build
          cd SDL2-${SDL2_VERSION}/build
          CC=../build-scripts/clang-fat.sh ../configure --without-x --disable-jack --disable-static --prefix "${PWD}"
          make
          make install
          lipo -thin arm64 lib/libSDL2-2.0.0.dylib -output ../../artifacts/arm64/SDL2.dylib
          lipo -thin x86_64 lib/libSDL2-2.0.0.dylib -output ../../artifacts/x86_64/SDL2.dylib
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: macOS
          path: artifacts
  linux-x64:
    name: Linux (x64)
    runs-on: ubuntu-20.04
    container: centos:centos7
    steps:
      - name: Install Dependencies
        run: |
          chown -R $(id -u):$(id -g) $PWD
          yum -y install https://repo.ius.io/ius-release-el7.rpm centos-release-scl scl-utils
          yum -y install devtoolset-8 cmake3 bzip2 patch
          yum -y install alsa-lib-devel portaudio-devel pulseaudio-libs-devel libsoundio-devel
          yum -y install libXext-devel libX11-devel mesa-libGL-devel mesa-libGLU-devel libXrender-devel libXrandr-devel libXcursor-devel libXinerama-devel libXi-devel
          mkdir -p artifacts/x64
      - name: Freetype
        run: |
          source /opt/rh/devtoolset-8/enable
          curl -s -L -O https://download.savannah.gnu.org/releases/freetype/freetype-${FREETYPE_VERSION}.tar.xz
          tar xf freetype-${FREETYPE_VERSION}.tar.xz
          mkdir freetype-${FREETYPE_VERSION}/build
          cd freetype-${FREETYPE_VERSION}/build
          cmake3 .. -DBUILD_SHARED_LIBS=true -DCMAKE_BUILD_TYPE=Release -DFT_DISABLE_ZLIB=TRUE -DFT_DISABLE_BZIP2=TRUE -DFT_DISABLE_PNG=TRUE -DFT_DISABLE_HARFBUZZ=TRUE -DFT_DISABLE_BROTLI=TRUE
          cmake3 --build .
          cp libfreetype.so ../../artifacts/x64/freetype6.so
      - name: OpenAL Soft
        run: |
          source /opt/rh/devtoolset-8/enable
          curl -s -L -O https://openal-soft.org/openal-releases/openal-soft-${OPENALSOFT_VERSION}.tar.bz2
          tar xf openal-soft-${OPENALSOFT_VERSION}.tar.bz2
          cd openal-soft-${OPENALSOFT_VERSION}/build
          cmake3 .. -DBUILD_SHARED_LIBS=true -DCMAKE_BUILD_TYPE=Release
          cmake3 --build .
          cp libopenal.so ../../artifacts/x64/soft_oal.so
      - name: Lua 5.1
        run: |
          source /opt/rh/devtoolset-8/enable
          curl -s -L -O https://www.lua.org/ftp/lua-${LUA_VERSION}.tar.gz
          curl -s -L -O https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/${GITHUB_REF_NAME}/liblua.linux.patch
          tar xf lua-${LUA_VERSION}.tar.gz
          cd lua-${LUA_VERSION}/src/
          patch < ../../liblua.linux.patch
          make liblua.so
          cp liblua.so ../../artifacts/x64/lua51.so
      - name: SDL2
        run: |
          source /opt/rh/devtoolset-8/enable
          curl -s -L -O http://www.libsdl.org/release/SDL2-${SDL2_VERSION}.tar.gz
          tar xf SDL2-${SDL2_VERSION}.tar.gz
          cd SDL2-${SDL2_VERSION}
          ./configure --disable-rpath --disable-loadso --disable-audio --disable-sensor --enable-x11-shared --enable-video-wayland --disable-video-directfb --disable-video-vulkan --disable-video-dummy --disable-power --disable-joystick --disable-haptic --disable-filesystem --disable-file --disable-cpuinfo --prefix "${PWD}"
          make
          make install
          cp lib/libSDL2.so ../artifacts/x64/SDL2.so
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Linux (x64)
          path: artifacts
  linux-arm64:
    runs-on: ubuntu-20.04
    name: Linux (arm64)
    steps:
      - name: Clone Repository
        uses: actions/checkout@v2.1.0
      - name: Freetype
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu18.04
          shell: /bin/sh
          setup: |
            mkdir -p "${PWD}/artifacts/arm64"
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          env: |
            FREETYPE_VERSION: ${{ env.FREETYPE_VERSION }}
          run: |
            apt-get update -q -y
            apt-get install -y build-essential curl cmake
            curl -s -L -O https://download.savannah.gnu.org/releases/freetype/freetype-${FREETYPE_VERSION}.tar.xz
            tar xf freetype-${FREETYPE_VERSION}.tar.xz
            mkdir freetype-${FREETYPE_VERSION}/build
            cd freetype-${FREETYPE_VERSION}/build
            cmake .. -DBUILD_SHARED_LIBS=true -DCMAKE_BUILD_TYPE=Release -DFT_DISABLE_ZLIB=TRUE -DFT_DISABLE_BZIP2=TRUE -DFT_DISABLE_PNG=TRUE -DFT_DISABLE_HARFBUZZ=TRUE -DFT_DISABLE_BROTLI=TRUE
            cmake --build .
            cp libfreetype.so /artifacts/arm64/freetype6.so
      - name: OpenAL Soft
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu18.04
          shell: /bin/sh
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          env: |
            OPENALSOFT_VERSION: ${{ env.OPENALSOFT_VERSION }}
          run: |
            apt-get update -q -y
            apt-get install -y build-essential curl cmake libasound2-dev portaudio19-dev libpulse-dev
            curl -s -L -O https://openal-soft.org/openal-releases/openal-soft-${OPENALSOFT_VERSION}.tar.bz2
            tar xf openal-soft-${OPENALSOFT_VERSION}.tar.bz2
            cd openal-soft-${OPENALSOFT_VERSION}/build
            cmake .. -DBUILD_SHARED_LIBS=true -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cp libopenal.so /artifacts/arm64/soft_oal.so
      - name: Lua 5.1
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu18.04
          shell: /bin/sh
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          env: |
            LUA_VERSION: ${{ env.LUA_VERSION }}
          run: |
            apt-get update -q -y
            apt-get install -y build-essential curl
            curl -s -L -O https://www.lua.org/ftp/lua-${LUA_VERSION}.tar.gz
            tar xf lua-${LUA_VERSION}.tar.gz
            cd lua-${LUA_VERSION}/src/
            patch < ../../liblua.linux.patch
            make liblua.so
            cp liblua.so /artifacts/arm64/lua51.so
      - name: SDL2
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu18.04
          shell: /bin/sh
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          env: |
            SDL2_VERSION: ${{ env.SDL2_VERSION }}
          run: |
            apt-get update -q -y
            apt-get install -y build-essential curl libxext-dev libx11-dev libwayland-dev libgl1-mesa-dev libglu1-mesa-dev libxrender-dev libxrandr-dev libxcursor-dev libxinerama-dev libxi-dev
            curl -s -L -O http://www.libsdl.org/release/SDL2-${SDL2_VERSION}.tar.gz
            tar xf SDL2-${SDL2_VERSION}.tar.gz
            cd SDL2-${SDL2_VERSION}
            ./configure --disable-rpath --disable-loadso --disable-audio --disable-sensor --enable-x11-shared --enable-video-wayland --disable-video-directfb --disable-video-vulkan --disable-video-dummy --disable-power --disable-joystick --disable-haptic --disable-filesystem --disable-file --disable-cpuinfo --prefix "${PWD}"
            make
            make install
            cp lib/libSDL2.so /artifacts/arm64/SDL2.so
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Linux (arm64)
          path: artifacts
  windows:
    name: Windows (x64 + x86)
    runs-on: ubuntu-20.04
    steps:
      - name: Clone Repository
        uses: actions/checkout@v2.1.0
      - name: Install Dependencies
        run: |
          mkdir -p artifacts/x64
          mkdir artifacts/x86
          sudo apt-get install mingw-w64
      - name: Freetype
        run: |
          curl -s -L -O https://download.savannah.gnu.org/releases/freetype/freetype-${FREETYPE_VERSION}.tar.xz
          tar xf freetype-${FREETYPE_VERSION}.tar.xz
          mkdir freetype-${FREETYPE_VERSION}/build
          cd freetype-${FREETYPE_VERSION}/build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../../mingw-x64.cmake -DBUILD_SHARED_LIBS=true -DCMAKE_BUILD_TYPE=Release -DFT_DISABLE_ZLIB=TRUE -DFT_DISABLE_BZIP2=TRUE -DFT_DISABLE_PNG=TRUE -DFT_DISABLE_HARFBUZZ=TRUE -DFT_DISABLE_BROTLI=TRUE
          cmake --build .
          cp libfreetype.dll ../../artifacts/x64/freetype6.dll
          rm -rf *
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../../mingw-x86.cmake -DBUILD_SHARED_LIBS=true -DCMAKE_BUILD_TYPE=Release -DFT_DISABLE_ZLIB=TRUE -DFT_DISABLE_BZIP2=TRUE -DFT_DISABLE_PNG=TRUE -DFT_DISABLE_HARFBUZZ=TRUE -DFT_DISABLE_BROTLI=TRUE -DCMAKE_SHARED_LINKER_FLAGS="-static-libgcc"
          cmake --build .
          cp libfreetype.dll ../../artifacts/x86/freetype6.dll
      - name: OpenAL Soft
        run: |
          curl -s -L -O https://openal-soft.org/openal-binaries/openal-soft-${OPENALSOFT_VERSION}-bin.zip
          unzip -j -d artifacts/x86 openal-soft-${OPENALSOFT_VERSION}-bin.zip openal-soft-${OPENALSOFT_VERSION}-bin/bin/Win32/soft_oal.dll
          unzip -j -d artifacts/x64 openal-soft-${OPENALSOFT_VERSION}-bin.zip openal-soft-${OPENALSOFT_VERSION}-bin/bin/Win64/soft_oal.dll
      - name: Lua 5.1
        run: |
          curl -s -L -O https://www.lua.org/ftp/lua-${LUA_VERSION}.tar.gz
          tar xf lua-${LUA_VERSION}.tar.gz
          cd lua-${LUA_VERSION}/src/
          make mingw CC=x86_64-w64-mingw32-gcc
          cp lua51.dll ../../artifacts/x64/
          make clean
          make mingw CC=i686-w64-mingw32-gcc
          cp lua51.dll ../../artifacts/x86/
      - name: SDL2
        run: |
          curl -s -L -O https://libsdl.org/release/SDL2-${SDL2_VERSION}-win32-x86.zip
          unzip SDL2-${SDL2_VERSION}-win32-x86.zip SDL2.dll -d artifacts/x86
          curl -s -L -O https://libsdl.org/release/SDL2-${SDL2_VERSION}-win32-x64.zip
          unzip SDL2-${SDL2_VERSION}-win32-x64.zip SDL2.dll -d artifacts/x64
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Windows
          path: artifacts